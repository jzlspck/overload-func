(function(o,a){typeof exports=="object"&&typeof module<"u"?a(exports):typeof define=="function"&&define.amd?define(["exports"],a):(o=typeof globalThis<"u"?globalThis:o||self,a(o.Overload={}))})(this,function(o){"use strict";const a={date:Date,map:Map,set:Set,weakmap:WeakMap,weakset:WeakSet,regexp:RegExp,promise:Promise,error:Error};function y(e,s){if(Array.isArray(e))return"array";const t={...s,...a};for(const r in t)if(e instanceof t[r])return r;const n=typeof e;return n==="object"&&e===null?"null":n}function d(e,s){return e.map(t=>y(t,s))}const u=Symbol("extendType");function m(e){return Object.defineProperty(e,u,{enumerable:!1,configurable:!1,writable:!1,value:!0}),e}function T(e={}){const{allowMultiple:s=!1,extendType:t}=e;t&&!t[u]&&console.warn("Warning: The extendType should be created using createExtendType for proper functionality.");const n=new Map,r=function(...p){const i=d(p,t).join("-"),l=n.get(i);if(!l)throw new Error(`No implementation found for argument types: (${i.split("-").join(", ")})`);return l.apply(this,p)};return r.addImple=function(...p){const i=p.pop();if(typeof i!="function")throw new Error("The last argument must be a function.");const l=p,c=l.join("-");if(n.has(c))if(s){const b=n.get(c),h=function(...f){return b.apply(this,f),i.apply(this,f)};return n.set(c,h),r}else throw new Error(`Implementation for types (${l.join(", ")}) already exists.`);return n.set(c,i),r},r}o.createExtendType=m,o.createOverloadedFunction=T,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})});
